<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>LearnOpenGL-note-1</title>
    <link href="/2022/09/03/LearnOpenGL-1.1~1.2/"/>
    <url>/2022/09/03/LearnOpenGL-1.1~1.2/</url>
    
    <content type="html"><![CDATA[<p>This is the first article of my notes while I’m learning the <a href="https://learnopengl-cn.github.io/">LearnOpenGL-CN</a> tutorial. The original English version is <a href="https://learnopengl.com/Getting-started/OpenGL">here</a>. I write these articles just for reviewing the tutorial. In these notes, I will only focus on the key points of every section, so some other points will be neglected.</p><h1 id="1-创建窗口-Creating-a-window"><a href="#1-创建窗口-Creating-a-window" class="headerlink" title="1. 创建窗口 Creating a window"></a>1. 创建窗口 <a href="https://learnopengl.com/Getting-started/Creating-a-window">Creating a window</a></h1><p>This section shows how to set up the env of OpenGL.</p><h2 id="Key-Points"><a href="#Key-Points" class="headerlink" title="Key Points:"></a>Key Points:</h2><ol><li>GLFW is a library for creating OpenGL context and a window.</li><li>GLAD also a library to retrieve the location of the functions. (Not fully understand: “Since there are many different versions of OpenGL drivers, the location of most of its functions is not known at compile-time and needs to be queried at run-time.” )</li></ol><h1 id="2-Hello-Window"><a href="#2-Hello-Window" class="headerlink" title="2. Hello, Window."></a>2. <a href="https://learnopengl.com/Getting-started/Hello-Window">Hello, Window.</a></h1><p>This section shows how to build a window.</p><h2 id="Key-Points："><a href="#Key-Points：" class="headerlink" title="Key Points："></a>Key Points：</h2><h3 id="1-create-a-window"><a href="#1-create-a-window" class="headerlink" title="1. create a window:"></a>1. <strong>create a window</strong>:</h3><h4 id="1-1-Init-functions"><a href="#1-1-Init-functions" class="headerlink" title="1.1 Init functions"></a>1.1 <strong>Init functions</strong></h4><p>Function <code>glfwInit</code> is used for initialization of GLFW library. <code>glfwWindowHint</code> is used for configuration of the library, which specifies the OpenGL version we use.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">glfwInit</span>(); <span class="hljs-comment">// init GLFW library</span><br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MAJOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_CONTEXT_VERSION_MINOR, <span class="hljs-number">3</span>);<br>    <span class="hljs-built_in">glfwWindowHint</span>(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);<br>    <span class="hljs-comment">//glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); // fow Mac ONLY</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="2-Viewport"><a href="#2-Viewport" class="headerlink" title="2. Viewport"></a><strong>2. Viewport</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">800</span>, <span class="hljs-number">600</span>);<br><br></code></pre></td></tr></table></figure><p>The first two parameters of glViewport set the location of the lower left corner of the window. The third and fourth parameter set the width and height of the rendering window in pixels, which we set equal to GLFW’s window size.</p><p>We use a registered callback function to update the window size.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// declaration</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">framebuffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span>;  <br><br><span class="hljs-comment">// definition</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">framebuffer_size_callback</span><span class="hljs-params">(GLFWwindow* window, <span class="hljs-type">int</span> width, <span class="hljs-type">int</span> height)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-built_in">glViewport</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width, height);<br>&#125;  <br><br><span class="hljs-comment">// register the callback function</span><br><span class="hljs-built_in">glfwSetFramebufferSizeCallback</span>(window, framebuffer_size_callback); <br><br></code></pre></td></tr></table></figure><h3 id="3-Render-Loop"><a href="#3-Render-Loop" class="headerlink" title="3. Render Loop"></a><strong>3. Render Loop</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">glfwWindowShouldClose</span>(window))<br>&#123;<br>    <span class="hljs-built_in">processInput</span>(window); <span class="hljs-comment">// see section Input</span><br>    <span class="hljs-built_in">glfwSwapBuffers</span>(window);<br>    <span class="hljs-built_in">glfwPollEvents</span>();    <br>&#125;<br><br></code></pre></td></tr></table></figure><p>From the origin:<br>“The glfwWindowShouldClose function checks at the start of each loop iteration if GLFW has been instructed to close. If so, the function returns true and the render loop stops running, after which we can close the application.<br>The glfwPollEvents function checks if any events are triggered (like keyboard input or mouse movement events), updates the window state, and calls the corresponding functions (which we can register via callback methods). The glfwSwapBuffers will swap the color buffer (a large 2D buffer that contains color values for each pixel in GLFW’s window) that is used to render to during this render iteration and show it as output to the screen.”</p><p><strong>Double Buffer</strong><br>To avoid display flickering issues casued by the non-instant way of drawing.</p><h3 id="4-termination"><a href="#4-termination" class="headerlink" title="4. termination"></a><strong>4. termination</strong></h3><p>Before ending the rendering loop, we need to clear the resources via the glfwTerminate function.</p><h3 id="5-Input"><a href="#5-Input" class="headerlink" title="5. Input"></a><strong>5. Input</strong></h3><p>This function is called when esc key is pressed to terminate the rendering.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">processInput</span><span class="hljs-params">(GLFWwindow *window)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">glfwGetKey</span>(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)<br>        <span class="hljs-built_in">glfwSetWindowShouldClose</span>(window, <span class="hljs-literal">true</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-clearColor"><a href="#6-clearColor" class="headerlink" title="6.clearColor"></a><strong>6.clearColor</strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">glClearColor</span>(<span class="hljs-number">0.2f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">0.3f</span>, <span class="hljs-number">1.0f</span>);<br><span class="hljs-built_in">glClear</span>(GL_COLOR_BUFFER_BIT);<br></code></pre></td></tr></table></figure><p>Buffer bit: GL_COLOR_BUFFER_BIT, GL_DEPTH_BUFFER_BIT, GL_STENCIL_BUFFER_BIT</p>]]></content>
    
    
    <categories>
      
      <category>Computer Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>First Article</title>
    <link href="/2022/09/01/first-article/"/>
    <url>/2022/09/01/first-article/</url>
    
    <content type="html"><![CDATA[<p>this is a test article.</p>]]></content>
    
    
    <categories>
      
      <category>Computer Vision</category>
      
      <category>Computer Graphics</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Computer Graphics</tag>
      
      <tag>Computer Vision</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello Hexo</title>
    <link href="/2022/09/01/hello-world/"/>
    <url>/2022/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
